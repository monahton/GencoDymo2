[{"path":"https://monahton.github.io/GencoDymo2/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://monahton.github.io/GencoDymo2/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://monahton.github.io/GencoDymo2/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://monahton.github.io/GencoDymo2/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://monahton.github.io/GencoDymo2/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://monahton.github.io/GencoDymo2/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://monahton.github.io/GencoDymo2/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://monahton.github.io/GencoDymo2/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://monahton.github.io/GencoDymo2/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://monahton.github.io/GencoDymo2/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://monahton.github.io/GencoDymo2/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://monahton.github.io/GencoDymo2/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://monahton.github.io/GencoDymo2/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://monahton.github.io/GencoDymo2/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://monahton.github.io/GencoDymo2/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://monahton.github.io/GencoDymo2/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://monahton.github.io/GencoDymo2/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://monahton.github.io/GencoDymo2/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://monahton.github.io/GencoDymo2/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://monahton.github.io/GencoDymo2/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://monahton.github.io/GencoDymo2/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://monahton.github.io/GencoDymo2/articles/GencoDymo2_vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"GencoDymo2: Comprehensive Analysis of GENCODE Annotations and Splice Site Motifs","text":"Gene annotations provided several databases integrate data systematic explorations various experimental computational resources. GENCODE project [1], part ENCODE project [2], offers accurate annotations human mouse genomes derived literature, primary data repositories, computational predictions, manual annotation, experimental validation genes transcripts, including noncoding transcripts continually discovered annotated. GENCODE one comprehensive standardized databases gene annotations, widely used scientific community.​ gene sets provided GENCODE comprehensive include protein-coding non-coding loci, encompassing alternatively spliced isoforms pseudogenes. GENCODE gene annotations regularly updated released Ensembl/GENCODE gene sets, accessible via official website (https://www.gencodegenes.org). October 2024, latest human release GENCODE 47, latest mouse release GENCODE M36 [1]. GENCODE gene sets released approximately four times year mouse twice year human [1].​ GencoDymo2 R package designed interrogate different releases GENCODE annotations human mouse genomes. provides streamlined interface accessing processing GENCODE annotations, providing easily accessible data regarding annotation statistics, release comparisons, information introns splice sites. Moreover, GencoDymo2 can produce FASTA files donor acceptor splice site motifs can directly uploaded MaxEntScan tool [3] calculation splice site scores.  GencoDymo2 can used import process gtf/gff3 formatted file. automatizes speeds following data manipulation steps: Dynamic detection latest GENCODE releases official website Unified interface GTF/GFF3 file retrieval human mouse genomes Compare annotations different GENCODE releases Perform summary statistics gene annotations Extract introns information Assign splice sites consensus sequence Compile MaxEntScan splice sites motifs","code":""},{"path":"https://monahton.github.io/GencoDymo2/articles/GencoDymo2_vignette.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"GencoDymo2: Comprehensive Analysis of GENCODE Annotations and Splice Site Motifs","text":"GencoDymo2 runs R statistical computing environment. need R version 4.1.0 higher. recent version GencoDymo2 can installed GitHub. recommend using pak package fast reliable installation.","code":"# Install pak if not already installed if (!require(\"pak\")) install.packages(\"pak\") # Install from GitHub pak::pkg_install(\"github::monahton/GencoDymo2\")  # Load the package library(GencoDymo2)"},{"path":[]},{"path":"https://monahton.github.io/GencoDymo2/articles/GencoDymo2_vignette.html","id":"latest-releases","dir":"Articles","previous_headings":"Usage","what":"Latest Releases","title":"GencoDymo2: Comprehensive Analysis of GENCODE Annotations and Splice Site Motifs","text":"GENCODE releases annotations approximately every three months, coinciding Ensembl releases. latest release GENCODE human mouse genomes can obtained using get_latest_release() function. function queries official GENCODE website determine recent release given species (human mouse).  NOTE: Behind scenes, get_latest_release() parses Ensembl public FTP site, extracts release version (e.g., “release_47”), returns programmatic use.","code":"# Fetch the most recent human and mouse GENCODE release identifiers human_release <- get_latest_release(\"human\", verbose = T) mouse_release <- get_latest_release(\"mouse\", verbose = T) ## Latest human GENCODE release: release_47 ## Latest human GENCODE release: release_M36"},{"path":"https://monahton.github.io/GencoDymo2/articles/GencoDymo2_vignette.html","id":"download-gtfgff3-files","dir":"Articles","previous_headings":"Usage","what":"Download GTF/GFF3 Files","title":"GencoDymo2: Comprehensive Analysis of GENCODE Annotations and Splice Site Motifs","text":"GencoDymo2 allows download gtf gff3 files latest release release specified user. files can obtained human mouse genome can saved path specified user. release identifiers hand, can download annotation files:","code":"# Download latest human long noncoding RNAs GTF lnc_47_gtf <- get_gtf(   species = \"human\",   release_version = human_release,   annotation_type = \"long_noncoding_RNAs.gtf.gz\",   dest_folder = \"~/Desktop/\" )  # Download previous human release (release_46) for comparison lnc_46_gtf <- get_gtf(   species = \"human\",   release_version = \"release_46\",   annotation_type = \"long_noncoding_RNAs.gtf.gz\",   dest_folder = \"~/Desktop/\" )  # Download latest mouse primary assembly annotations (GFF3) mouse_36_gff3 <- get_gff3(   species = \"mouse\",   release_version = mouse_release,   annotation_type = \"primary_assembly.annotation.gff3.gz\",   dest_folder = \"~/Desktop/\" )"},{"path":"https://monahton.github.io/GencoDymo2/articles/GencoDymo2_vignette.html","id":"supported-annotation-types","dir":"Articles","previous_headings":"Usage > Download GTF/GFF3 Files","what":"Supported Annotation Types","title":"GencoDymo2: Comprehensive Analysis of GENCODE Annotations and Splice Site Motifs","text":"valid annotation types gtf gff3 format can one following:","code":"## Valid Annotation Types: ## [1] \"annotation\"                            ## [2] \"basic.annotation\"                      ## [3] \"chr_patch_hapl_scaff.annotation\"       ## [4] \"chr_patch_hapl_scaff.basic.annotation\" ## [5] \"long_noncoding_RNAs\"                   ## [6] \"primary_assembly.annotation\"           ## [7] \"primary_assembly.basic.annotation\"     ## [8] \"tRNAs\"                                 ## [9] \"polyAs\""},{"path":"https://monahton.github.io/GencoDymo2/articles/GencoDymo2_vignette.html","id":"load-and-inspect","dir":"Articles","previous_headings":"Usage","what":"Load and Inspect","title":"GencoDymo2: Comprehensive Analysis of GENCODE Annotations and Splice Site Motifs","text":"gtf gff3 file can imported R dataframe using load_file() function. downloaded, load files R data frames using load_file(). function automatically detects GTF vs GFF3 parses attributes columns.","code":"# Loading using the stored paths from previous steps lnc_47_df <- load_file(lnc_47_gtf) head(lnc_47_df)  # Alternatively, specify the file path directly lnc_46_df <- load_file(\"~/Desktop/gencode.v46.long_noncoding_RNAs.gtf.gz\") head(lnc_46_df)  # Load mouse GFF3 mouse_pri_36 <- load_file(\"~/Desktop/gencode.vM36.primary_assembly.annotation.gff3.gz\") head(mouse_pri_36)"},{"path":"https://monahton.github.io/GencoDymo2/articles/GencoDymo2_vignette.html","id":"compare-releases","dir":"Articles","previous_headings":"Usage","what":"Compare Releases","title":"GencoDymo2: Comprehensive Analysis of GENCODE Annotations and Splice Site Motifs","text":"GENCODE regularly updates annotations, different releases GENCODE contain differing number annotations. genes added new releases others classified different gene classes. majority cases, Ensembl gene ID genes remains constant gene name might vary. quantify changes two releases, use compare_release(). Specify two annotation data frames type feature compare (“gene”, “transcript”, “exon”, etc.). Additional filters like gene_type baseline can allow focus subsets (e.g., TEC protein_coding genes) different reference counts calculation difference percentage. function produces output Delta value, corresponds difference number specified elements two inputs, addition Percentage.  NOTE: output data frame summarizing absolute percentage differences feature counts, enabling rapid assessment annotation growth refinement.","code":"# Compare gene counts between release 47 and 46 gene_comparison <- compare_release(lnc_47_df, lnc_46_df, type = \"gene\")  # Compare exon counts exon_comparison <- compare_release(lnc_47_df, lnc_46_df, type = \"exon\")  # Compare a specific gene biotype (e.g., TEC) using a custom baseline comparison <- compare_release(   lnc_47_df,   lnc_46_df,   type = \"gene\",   gene_type = \"TEC\",   baseline = \"count1\" )"},{"path":"https://monahton.github.io/GencoDymo2/articles/GencoDymo2_vignette.html","id":"extract-introns-coordinates","dir":"Articles","previous_headings":"Usage","what":"Extract Introns Coordinates","title":"GencoDymo2: Comprehensive Analysis of GENCODE Annotations and Splice Site Motifs","text":"gtf files provided GENCODE list genes, transcripts, exons intronic regions must inferred. Given loaded data frame gtf files GENCODE, extract_introns() function computes intron coordinates transcript sorting exon ranges identifying gaps. returns dataframe containing introns coordinates position within transcript.","code":"# Human lncRNA introns for release 47 introns_lnc_47 <- extract_introns(lnc_47_df, verbose = T)  # Mouse introns (filtering to primary chromosomes first) mouse_pri_36 <- mouse_pri_36[grepl(\"^chr\", mouse_pri_36$seqnames), ] mouse_introns_pri_36 <- extract_introns(mouse_pri_36, verbose = T)"},{"path":"https://monahton.github.io/GencoDymo2/articles/GencoDymo2_vignette.html","id":"extract-donor-and-acceptor-splice-sites","dir":"Articles","previous_headings":"Usage","what":"Extract Donor and Acceptor Splice Sites","title":"GencoDymo2: Comprehensive Analysis of GENCODE Annotations and Splice Site Motifs","text":"Splice sites defined dinucleotide motifs intron boundaries. 5’ end, donor site includes almost invariant sequence GT (GU RNA). 3’ end, intron terminates acceptor site, almost invariant AG sequence.   majority introns belong U2-type spliceosome flanked GT– AG splice site dinucleotides. frequent exception rule U2-type GC–AG splice sites, comprising ∼0.8% human splice sites ∼0.09% human splice sites belong U12-type processed minor spliceosome flanked –AC dinucleotides [4]. assign_splice_sites() function retrieves flanking sequences BSgenome object. adds two new columns data frame containing introns coordinates, assigning 5’ 3’ splice sites. Sequences retrieved loaded BSgenome object BSgenome.Hsapiens.UCSC.hg38 human BSgenome.Mmusculus.UCSC.mm39 mouse.","code":"# Human library(BSgenome.Hsapiens.UCSC.hg38) lnc_47_ss <- assign_splice_sites(   introns_lnc_47,   genome = BSgenome.Hsapiens.UCSC.hg38,   verbose = T )  # Mouse library(BSgenome.Mmusculus.UCSC.mm39) mouse_pri_36_ss <- assign_splice_sites(   mouse_introns_pri_36,   genome = BSgenome.Mmusculus.UCSC.mm39,   verbose = T )"},{"path":"https://monahton.github.io/GencoDymo2/articles/GencoDymo2_vignette.html","id":"identify-cryptic-splice-sites","dir":"Articles","previous_headings":"Usage > Extract Donor and Acceptor Splice Sites","what":"Identify Cryptic splice sites","title":"GencoDymo2: Comprehensive Analysis of GENCODE Annotations and Splice Site Motifs","text":"Cryptic splice sites match canonical donor (GT) acceptor motifs (AG). find_cryptic_splice_sites() function identifies potential cryptic splice sites comparing sequence motifs introns canonical splice site motifs (donor acceptor) can also specified user. compares identified splice sites provided canonical motifs flags sites differ canonical patterns, making useful studying aberrant splicing events.","code":"# Identify cryptic (non-canonical) splice sites cryptic_ss <- find_cryptic_splice_sites(   lnc_47_ss,   genome = BSgenome.Hsapiens.UCSC.hg38,   canonical_donor = \"GT\",   canonical_acceptor = \"AG\",   verbose = TRUE )"},{"path":"https://monahton.github.io/GencoDymo2/articles/GencoDymo2_vignette.html","id":"extract-splice-sites-motifs-for-maxentscan-webtool","dir":"Articles","previous_headings":"Usage > Extract Donor and Acceptor Splice Sites","what":"Extract splice sites motifs for MaxEntScan webtool","title":"GencoDymo2: Comprehensive Analysis of GENCODE Annotations and Splice Site Motifs","text":"MaxEntScan webtool based approach modeling sequences short sequence motifs involved RNA splicing simultaneously accounts non-adjacent well adjacent dependencies positions. method based ‘Maximum Entropy Principle’ generalizes previous probabilistic models sequence motifs weight matrix models inhomogeneous Markov models [3]. MaxEntScan::score5ss assign scores donor splice sites according four models (http://hollywood.mit.edu/burgelab/maxent/Xmaxentscan_scoreseq.html) using 9-mer SEQUENCES motif input .fa file. 9-mers motif contain 3 bases exon 6 bases intron. MaxEntScan::score3ss assign scores donor splice sites according three models (http://hollywood.mit.edu/burgelab/maxent/Xmaxentscan_scoreseq_acc.html). takes input .fa file 23-mer SEQUENCES 20 bases intron 3 bases exon. extract_ss_motif() function used along BSgenome object studied species retrieve MaxEntScan::score5ss MaxEntScan::score3ss motif sequences. user can choose generate fasta file working directory specified path output, contains either 9-mers 23-mers, respectively 5’ 3’ splice-sites. generates also dataframe coordinates IDs corresponding motifs. generated fasta files can directly utilized MaxEntScan tools. first argument input dataframe containing intron coordinates. second argument genome BSgenome object (human genome sequence hg38 used default). third argument type specifies whether extract motifs 5ss 3ss. Users can optionally set argument save_fasta TRUE output_file argument save fasta file.","code":"# Donor motifs (5'ss) motifs_donor <- extract_ss_motif(   input = lnc_47_ss,   genome = BSgenome.Hsapiens.UCSC.hg38,   type = \"5ss\",   verbose = T,   save_fasta = T,   output_file = \"~/Desktop/lnc_47_5ss_motifs.fa\" )  # Acceptor motifs (3'ss) motifs_acc <- extract_ss_motif(   input = lnc_47_ss,   genome = BSgenome.Hsapiens.UCSC.hg38,   type = \"3ss\",   verbose = T,   save_fasta = T,   output_file = \"~/Desktop/lnc_47_3ss_motifs.fa\" )"},{"path":[]},{"path":"https://monahton.github.io/GencoDymo2/articles/GencoDymo2_vignette.html","id":"single-exon-features","dir":"Articles","previous_headings":"Additional Utilities","what":"Single-Exon Features","title":"GencoDymo2: Comprehensive Analysis of GENCODE Annotations and Splice Site Motifs","text":"genes unspliced: composed one single exon introns. extract_single_exon() function can extract single-exon genes transcripts returns dataframe ensembl gene IDs transcript IDs.","code":"## identify single exon genes and transcripts single_exon_genes <- extract_single_exon(lnc_47_df, level = \"gene\") single_exon_trans <- extract_single_exon(lnc_47_df, level = \"transcript\")"},{"path":"https://monahton.github.io/GencoDymo2/articles/GencoDymo2_vignette.html","id":"exon-classification","dir":"Articles","previous_headings":"Additional Utilities","what":"Exon Classification","title":"GencoDymo2: Comprehensive Analysis of GENCODE Annotations and Splice Site Motifs","text":"classify_exons() adds new column (EXON_CLASSIFICATION) input dataframe, describing position exon. labels exon (first_exons), (inner_exons), (last_exons) (single_exons) facilitating position-based analyses. classification informative considering first last exons often peculiar regulative roles.","code":"# Assign the ordinal position of exons lnc_47_class_exons <- classify_exons(lnc_47_df, verbose = TRUE)"},{"path":"https://monahton.github.io/GencoDymo2/articles/GencoDymo2_vignette.html","id":"spliced-transcript-length","dir":"Articles","previous_headings":"Additional Utilities","what":"Spliced Transcript Length","title":"GencoDymo2: Comprehensive Analysis of GENCODE Annotations and Splice Site Motifs","text":"spliced_trans_length() function computes mature (post-splicing) transcript length summing exon widths per transcript.","code":"# Length of spliced transcript   lnc_47_spliced_length <- spliced_trans_length(lnc_47_df) head(lnc_47_spliced_length)"},{"path":"https://monahton.github.io/GencoDymo2/articles/GencoDymo2_vignette.html","id":"summary-statistics","dir":"Articles","previous_headings":"Additional Utilities","what":"Summary Statistics","title":"GencoDymo2: Comprehensive Analysis of GENCODE Annotations and Splice Site Motifs","text":"GencoDymo2 provides stat_summary() function gives brief summary data annotations particular GENCODE release regarding genes, transcripts, exons introns.","code":"# Exon length statistics lnc_47_exon_stats <- stat_summary(lnc_47_class_exons, type = \"exon\")  # Intron length statistics lnc_47_intron_stats <- stat_summary(introns_lnc_47, type = \"intron\")"},{"path":"https://monahton.github.io/GencoDymo2/articles/GencoDymo2_vignette.html","id":"gc-content-calculation","dir":"Articles","previous_headings":"Additional Utilities","what":"GC Content Calculation","title":"GencoDymo2: Comprehensive Analysis of GENCODE Annotations and Splice Site Motifs","text":"calculate_gc_content() function computes GC percentage feature set using BSgenome reference.","code":"# Human lnc_47_gc <- calculate_gc_content(   lnc_47_df,   genome = BSgenome.Hsapiens.UCSC.hg38,   verbose = TRUE ) # Mouse mouse_pri_36_gc <- calculate_gc_content(   mouse_pri_36,   genome = BSgenome.Mmusculus.UCSC.mm39,   verbose = TRUE )"},{"path":"https://monahton.github.io/GencoDymo2/articles/GencoDymo2_vignette.html","id":"extract-cds-sequences","dir":"Articles","previous_headings":"Additional Utilities","what":"Extract CDS Sequences","title":"GencoDymo2: Comprehensive Analysis of GENCODE Annotations and Splice Site Motifs","text":"coding annotations, extract_cds_sequences() writes CDS FASTA files GRanges objects.","code":"# Convert to GRanges and extract library(GenomicRanges) mouse_pri_36_granges <- GRanges(mouse_pri_36) mouse_cds_seqs <- extract_cds_sequences(   mouse_pri_36_granges,   BSgenome.Mmusculus.UCSC.mm39,   save_fasta = TRUE,   output_file = \"~/Desktop/mouse_pri_36_CDS.fa.gz\",   verbose = TRUE )"},{"path":"https://monahton.github.io/GencoDymo2/articles/GencoDymo2_vignette.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session Information","title":"GencoDymo2: Comprehensive Analysis of GENCODE Annotations and Splice Site Motifs","text":"following provides session information used compiling document.","code":"## ─ Session info ─────────────────────────────────────────────────────────────── ##  setting  value ##  version  R version 4.5.0 (2025-04-11) ##  os       Ubuntu 24.04.2 LTS ##  system   x86_64, linux-gnu ##  ui       X11 ##  language en-US ##  collate  C.UTF-8 ##  ctype    C.UTF-8 ##  tz       UTC ##  date     2025-05-06 ##  pandoc   3.1.11 @ /opt/hostedtoolcache/pandoc/3.1.11/x64/ (via rmarkdown) ##  quarto   NA ##  ## ─ Packages ─────────────────────────────────────────────────────────────────── ##  package     * version date (UTC) lib source ##  bslib         0.9.0   2025-01-30 [1] RSPM ##  cachem        1.1.0   2024-05-16 [1] RSPM ##  cli           3.6.5   2025-04-23 [1] RSPM ##  desc          1.4.3   2023-12-10 [1] RSPM ##  devtools      2.4.5   2022-10-11 [1] RSPM ##  digest        0.6.37  2024-08-19 [1] RSPM ##  ellipsis      0.3.2   2021-04-29 [1] RSPM ##  evaluate      1.0.3   2025-01-10 [1] RSPM ##  fastmap       1.2.0   2024-05-15 [1] RSPM ##  fs            1.6.6   2025-04-12 [1] RSPM ##  glue          1.8.0   2024-09-30 [1] RSPM ##  htmltools     0.5.8.1 2024-04-04 [1] RSPM ##  htmlwidgets   1.6.4   2023-12-06 [1] RSPM ##  httpuv        1.6.16  2025-04-16 [1] RSPM ##  jquerylib     0.1.4   2021-04-26 [1] RSPM ##  jsonlite      2.0.0   2025-03-27 [1] RSPM ##  knitr         1.50    2025-03-16 [1] RSPM ##  later         1.4.2   2025-04-08 [1] RSPM ##  lifecycle     1.0.4   2023-11-07 [1] RSPM ##  magrittr      2.0.3   2022-03-30 [1] RSPM ##  memoise       2.0.1   2021-11-26 [1] RSPM ##  mime          0.13    2025-03-17 [1] RSPM ##  miniUI        0.1.2   2025-04-17 [1] RSPM ##  pkgbuild      1.4.7   2025-03-24 [1] RSPM ##  pkgdown       2.1.2   2025-04-28 [1] RSPM ##  pkgload       1.4.0   2024-06-28 [1] RSPM ##  profvis       0.4.0   2024-09-20 [1] RSPM ##  promises      1.3.2   2024-11-28 [1] RSPM ##  purrr         1.0.4   2025-02-05 [1] RSPM ##  R6            2.6.1   2025-02-15 [1] RSPM ##  ragg          1.4.0   2025-04-10 [1] RSPM ##  Rcpp          1.0.14  2025-01-12 [1] RSPM ##  remotes       2.5.0   2024-03-17 [1] RSPM ##  rlang         1.1.6   2025-04-11 [1] RSPM ##  rmarkdown     2.29    2024-11-04 [1] RSPM ##  sass          0.4.10  2025-04-11 [1] RSPM ##  sessioninfo   1.2.3   2025-02-05 [1] RSPM ##  shiny         1.10.0  2024-12-14 [1] RSPM ##  systemfonts   1.2.3   2025-04-30 [1] RSPM ##  textshaping   1.0.1   2025-05-01 [1] RSPM ##  urlchecker    1.0.1   2021-11-30 [1] RSPM ##  usethis       3.1.0   2024-11-26 [1] RSPM ##  vctrs         0.6.5   2023-12-01 [1] RSPM ##  xfun          0.52    2025-04-02 [1] RSPM ##  xtable        1.8-4   2019-04-21 [1] RSPM ##  yaml          2.3.10  2024-07-26 [1] RSPM ##  ##  [1] /home/runner/work/_temp/Library ##  [2] /opt/R/4.5.0/lib/R/site-library ##  [3] /opt/R/4.5.0/lib/R/library ##  ## ──────────────────────────────────────────────────────────────────────────────"},{"path":"https://monahton.github.io/GencoDymo2/articles/GencoDymo2_vignette.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"GencoDymo2: Comprehensive Analysis of GENCODE Annotations and Splice Site Motifs","text":"Frankish, ., Diekhans, M., Ferreira, .M., et al. (2023). GENCODE: reference annotation human mouse genomes 2023. Nucleic Acids Research, 51(D1), D942–D949. https://doi.org/10.1093/nar/gkac1071​ ENCODE Project Consortium. (2012). integrated encyclopedia DNA elements human genome. Nature, 489(7414), 57–74. https://doi.org/10.1038/nature11247​ Yeo, G., & Burge, C.B. (2004). Maximum entropy modeling short sequence motifs applications RNA splicing signals. Journal Computational Biology, 11(2-3), 377–394. https://doi.org/10.1089/1066527041410418​ Parada GE, Munita R, Cerda CA Gysling K. “comprehensive survey non-canonical splice sites human transcriptome”. Nucleic Acids Res. 2014. 42: 10564-10578. doi: 10.1093/nar/gku744. Abou Alezz, M., Celli, L., Belotti, G., et al. (2020). GC-AG Introns Features Long Non-coding Protein-Coding Genes Suggest Role Gene Expression Regulation. Front. Genet. 2020 11:488. https://doi:10.3389/fgene.2020.00488","code":""},{"path":"https://monahton.github.io/GencoDymo2/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Monah Abou Alezz. Author, maintainer, copyright holder. Lorenzo Salviati. Contributor. Roberta Alfieri. Contributor. Silvia Bione. Contributor.","code":""},{"path":"https://monahton.github.io/GencoDymo2/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Abou Alezz M, Celli L, Belotti G, Lisa , Bione S (2020). “GC-AG Introns Features Long Non-coding Protein-Coding Genes Suggest Role Gene Expression Regulation.” Frontiers Genetics, 11, 488. doi:10.3389/fgene.2020.00488. Abou Alezz M (2025). GencoDymo2: Comprehensive Analysis GENCODE Annotations Splice Site Motifs. doi:10.5281/zenodo.15302316, R package version 1.0.1, https://github.com/monahton/GencoDymo2.","code":"@Article{,   title = {GC-AG Introns Features in Long Non-coding and Protein-Coding Genes Suggest Their Role in Gene Expression Regulation},   author = {Monah {Abou Alezz} and Ludovica Celli and Giulia Belotti and Antonella Lisa and Silvia Bione},   journal = {Frontiers in Genetics},   year = {2020},   volume = {11},   pages = {488},   doi = {10.3389/fgene.2020.00488}, } @Manual{,   title = {GencoDymo2: Comprehensive Analysis of GENCODE Annotations and Splice Site Motifs},   author = {Monah {Abou Alezz}},   year = {2025},   note = {R package version 1.0.1},   url = {https://github.com/monahton/GencoDymo2},   doi = {10.5281/zenodo.15302316}, }"},{"path":[]},{"path":"https://monahton.github.io/GencoDymo2/index.html","id":"id_-overview","dir":"","previous_headings":"","what":"📦 Overview","title":"Comprehensive Analysis of GENCODE Annotations and Splice Site Motifs","text":"GencoDymo2 R package tailored dynamic extraction, exploration, comparison gene annotations GENCODE database human mouse genomes. tool facilitates: Automated retrieval latest specific GENCODE releases Visualization quantification annotation changes across versions Extraction introns, exons, splice motifs Generation splice site FASTA files tools like MaxEntScan bridges bioinformatics workflows annotation dynamics, enhancing reproducibility comparative studies transcriptome splicing research.","code":""},{"path":"https://monahton.github.io/GencoDymo2/index.html","id":"id_-installation","dir":"","previous_headings":"","what":"💻 Installation","title":"Comprehensive Analysis of GENCODE Annotations and Splice Site Motifs","text":"can install development version GencoDymo2 directly GitHub: load R session:","code":"# install.packages(\"devtools\") devtools::install_github(\"monahton/GencoDymo2\") library(GencoDymo2)"},{"path":"https://monahton.github.io/GencoDymo2/index.html","id":"id_-getting-started","dir":"","previous_headings":"","what":"🚀 Getting Started","title":"Comprehensive Analysis of GENCODE Annotations and Splice Site Motifs","text":"get started, view vignette: visit documentation website: 👉 https://monahton.github.io/GencoDymo2/","code":"vignette(\"GencoDymo2\")"},{"path":[]},{"path":"https://monahton.github.io/GencoDymo2/index.html","id":"id_️-development--contributing","dir":"","previous_headings":"","what":"🛠️ Development & Contributing","title":"Comprehensive Analysis of GENCODE Annotations and Splice Site Motifs","text":"GencoDymo2 actively developed. Contributions suggestions welcome! 🔧 Open issues: https://github.com/monahton/GencoDymo2/issues 📬 Email: aboualezz.monah@hsr.🤝 Pull requests encouraged!","code":""},{"path":"https://monahton.github.io/GencoDymo2/index.html","id":"writing_hand-author","dir":"","previous_headings":"","what":"✍️ Author","title":"Comprehensive Analysis of GENCODE Annotations and Splice Site Motifs","text":"Monah Abou Alezz, PhD – aboualezz.monah@hsr.. San Raffaele Telethon Institute Gene Therapy (SR-TIGET) IRCCS San Raffaele Scientific Institute, Milan, Italy 🌍 Personal website","code":""},{"path":"https://monahton.github.io/GencoDymo2/index.html","id":"id_-related-projects","dir":"","previous_headings":"","what":"🧪 Related Projects","title":"Comprehensive Analysis of GENCODE Annotations and Splice Site Motifs","text":"GENCODE MaxEntScan","code":""},{"path":"https://monahton.github.io/GencoDymo2/index.html","id":"id_-acknowledgments","dir":"","previous_headings":"","what":"📣 Acknowledgments","title":"Comprehensive Analysis of GENCODE Annotations and Splice Site Motifs","text":"Developed part ongoing research lncRNA splicing gene annotation evolution. Special thanks colleagues IGM-CNR collaborators across splicing research projects.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/assign_splice_sites.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign intron donor and acceptor splice sites consensus — assign_splice_sites","title":"Assign intron donor and acceptor splice sites consensus — assign_splice_sites","text":"function takes data frame intron coordinates genome sequence (ideally human mouse) returns data frame two additional columns donor acceptor splice site consensus sequences. prepares donor acceptor sequences based provided intron coordinates specified genome (e.g., human hg38), making useful downstream analysis splicing events.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/assign_splice_sites.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign intron donor and acceptor splice sites consensus — assign_splice_sites","text":"","code":"assign_splice_sites(input, genome = BSgenome.Hsapiens.UCSC.hg38, verbose = TRUE)"},{"path":"https://monahton.github.io/GencoDymo2/reference/assign_splice_sites.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign intron donor and acceptor splice sites consensus — assign_splice_sites","text":"input data frame containing intron coordinates following columns: seqnames: chromosome name. intron_start: start position intron. intron_end: end position intron. strand: strand intron located (+ -). transcript_id: ID transcript intron belongs. intron_number: number intron within transcript. gene_name: name gene. gene_id: gene ID. genome genome sequence (BSgenome object) species. Default human genome (hg38). object required extracting consensus sequences genome specified intron positions. verbose Logical. TRUE, function prints progress messages preparing splice site data. Default TRUE.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/assign_splice_sites.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign intron donor and acceptor splice sites consensus — assign_splice_sites","text":"data frame containing original intron data, two additional columns: donor_ss: donor splice site consensus sequence intron. acceptor_ss: acceptor splice site consensus sequence intron.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/assign_splice_sites.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assign intron donor and acceptor splice sites consensus — assign_splice_sites","text":"function performs following steps: First, prepares splice site sequences donor acceptor sites calculating positions based strand orientation intron coordinates. donor splice site typically located 5' end intron, acceptor splice site 3' end. function utilizes getSeq function BSgenome package extract nucleotide sequences donor acceptor sites specified genome (default hg38 humans). resulting sequences added new columns (donor_ss acceptor_ss) original input data frame. final data frame includes splice site sequences intron, allowing analysis splicing efficiency identification consensus motifs.","code":""},{"path":[]},{"path":"https://monahton.github.io/GencoDymo2/reference/assign_splice_sites.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign intron donor and acceptor splice sites consensus — assign_splice_sites","text":"","code":"suppressPackageStartupMessages(library(BSgenome.Hsapiens.UCSC.hg38)) file_v1 <- system.file(\"extdata\", \"gencode.v1.example.gtf.gz\", package = \"GencoDymo2\") gtf_v1 <- load_file(file_v1) introns_df <- extract_introns(gtf_v1) #> Preparing input... #> Removing single-exon transcripts... #> Single-exon transcripts: 1 #> Extracting intron coordinates... #> Collecting intron data... #> Total introns: 3 result <- assign_splice_sites(introns_df, genome = BSgenome.Hsapiens.UCSC.hg38) #> Preparing donor splice sites data... #> Preparing acceptor splice sites data... #> Merging donor and acceptor splice site data..."},{"path":"https://monahton.github.io/GencoDymo2/reference/calculate_gc_content.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate GC Content of Genomic Features — calculate_gc_content","title":"Calculate GC Content of Genomic Features — calculate_gc_content","text":"Computes GC content percentage exons introns using genome sequence data BSgenome object.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/calculate_gc_content.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate GC Content of Genomic Features — calculate_gc_content","text":"","code":"calculate_gc_content(input, genome, verbose = TRUE)"},{"path":"https://monahton.github.io/GencoDymo2/reference/calculate_gc_content.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate GC Content of Genomic Features — calculate_gc_content","text":"input data frame containing genomic features (exons/introns) seqnames, start, end, strand columns. genome BSgenome object representing reference genome (e.g., BSgenome.Hsapiens.UCSC.hg38). verbose logical indicating whether print progress messages. Defaults TRUE.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/calculate_gc_content.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate GC Content of Genomic Features — calculate_gc_content","text":"input data frame additional gc_content column containing GC percentages feature.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/calculate_gc_content.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate GC Content of Genomic Features — calculate_gc_content","text":"function extracts DNA sequence feature using genomic coordinates, calculates proportion G C nucleotides. Requires BSgenome package relevant genome.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/calculate_gc_content.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate GC Content of Genomic Features — calculate_gc_content","text":"","code":"library(BSgenome.Hsapiens.UCSC.hg38) file_v1 <- system.file(\"extdata\", \"gencode.v1.example.gtf.gz\", package = \"GencoDymo2\") gtf_v1 <- load_file(file_v1) gtf_with_gc <- calculate_gc_content(gtf_v1, genome = BSgenome.Hsapiens.UCSC.hg38, verbose = FALSE)"},{"path":"https://monahton.github.io/GencoDymo2/reference/classify_exons.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify Exons by Their Relative Transcript Position — classify_exons","title":"Classify Exons by Their Relative Transcript Position — classify_exons","text":"Categorizes exon transcript single, first, inner, last based position. classification helps analyzing transcript structure splicing patterns.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/classify_exons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify Exons by Their Relative Transcript Position — classify_exons","text":"","code":"classify_exons(input, verbose = TRUE)"},{"path":"https://monahton.github.io/GencoDymo2/reference/classify_exons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify Exons by Their Relative Transcript Position — classify_exons","text":"input character string specifying path GTF/GFF3 file data frame containing GTF-formatted data. file follow GENCODE format conventions. verbose logical indicating whether display progress messages exon counts. Defaults TRUE.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/classify_exons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify Exons by Their Relative Transcript Position — classify_exons","text":"data frame identical input additional column EXON_CLASSIFICATION. column contains one following values exon: \"single_exon\": transcript contains one exon. \"first_exon\": first exon multi-exon transcript. \"last_exon\": last exon multi-exon transcript. \"inner_exon\": Exons first last multi-exon transcripts.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/classify_exons.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Classify Exons by Their Relative Transcript Position — classify_exons","text":"function processes input GTF data : Load GTF file (path provided) use provided data frame. Filter entries include exons. transcript, count total exons determine exon's position. Classify exons based position total count. verbose = TRUE, function prints counts exon type.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/classify_exons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify Exons by Their Relative Transcript Position — classify_exons","text":"","code":"# Example 1: Using the provided example GTF files file_v1 <- system.file(\"extdata\", \"gencode.v1.example.gtf.gz\", package = \"GencoDymo2\") gtf_v1 <- classify_exons(file_v1) #> Loading GTF file: /home/runner/work/_temp/Library/GencoDymo2/extdata/gencode.v1.example.gtf.gz #> Classifying exons... #> Single exons: 1 #> First exons: 2 #> Last exons: 2 #> Inner exons: 1  # Example 2: Using a pre-loaded data frame file_v1 <- system.file(\"extdata\", \"gencode.v1.example.gtf.gz\", package = \"GencoDymo2\") gtf_v1 <- load_file(file_v1) classified_data_v1 <- classify_exons(gtf_v1) #> Using input dataframe... #> Classifying exons... #> Single exons: 1 #> First exons: 2 #> Last exons: 2 #> Inner exons: 1"},{"path":"https://monahton.github.io/GencoDymo2/reference/compare_release.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Annotation Counts Between Two GENCODE Releases — compare_release","title":"Compare Annotation Counts Between Two GENCODE Releases — compare_release","text":"Compares number annotated genomic elements (genes, transcripts, exons, introns) two specified GENCODE releases. function accepts input data either file paths (GTF/GFF format) pre-loaded data frames. computes absolute difference (delta), percentage change relative chosen baseline, determines direction change (increase decrease).","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/compare_release.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Annotation Counts Between Two GENCODE Releases — compare_release","text":"","code":"compare_release(input1, input2, type, gene_type = NULL, baseline = \"count2\")"},{"path":"https://monahton.github.io/GencoDymo2/reference/compare_release.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Annotation Counts Between Two GENCODE Releases — compare_release","text":"input1 character string specifying file path GTF/GFF file first GENCODE release, data frame containing annotation data. input2 character string specifying file path GTF/GFF file second GENCODE release, data frame containing annotation data. type character string indicating type genomic element compare. Valid options \"gene\", \"transcript\", \"exon\", \"intron\". gene_type optional character string specifying particular gene biotype filter comparisons (e.g., \"protein_coding\", \"lncRNA\"). NULL (default), gene types included. baseline character string defining baseline calculating percentage change. Options include: \"count1\": Uses count first input (release) baseline. \"count2\": Uses count second input (release) baseline (default). \"average\": Uses average counts inputs baseline.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/compare_release.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Annotation Counts Between Two GENCODE Releases — compare_release","text":"list following elements: delta: absolute difference number annotations. percentage: percentage change relative selected baseline. direction: string indicating direction change (\"increase\", \"decrease\", \"change\").","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/compare_release.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare Annotation Counts Between Two GENCODE Releases — compare_release","text":"function processes two GENCODE releases compare annotation counts specified genomic element type. Key steps include: Input Handling: inputs file paths, loaded data frames using load_file function. Data frames used directly. Element Filtering: gene_type specified, annotations filtered include gene biotype. Count Calculation: number elements (genes, transcripts, etc.) specified type counted release. Delta Percentage: absolute difference (delta) percentage change calculated based chosen baseline. Direction Determination: direction change determined comparing counts two releases. function provides numerical results formatted console output highlighting key metrics.","code":""},{"path":[]},{"path":"https://monahton.github.io/GencoDymo2/reference/compare_release.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Annotation Counts Between Two GENCODE Releases — compare_release","text":"","code":"file_v1 <- system.file(\"extdata\", \"gencode.v1.example.gtf.gz\", package = \"GencoDymo2\") file_v2 <- system.file(\"extdata\", \"gencode.v2.example.gtf.gz\", package = \"GencoDymo2\") # Example 1: Using data frames with the provided example GTF files gtf_v1 <- load_file(file_v1) gtf_v2 <- load_file(file_v2) comparison <- compare_release(gtf_v1, gtf_v2, type = \"gene\") #> Delta: 1 #> Percentage: 33.333% #> Change Direction: increase  # Example 2: Using file paths # comparison <- compare_release(file_v1, file_v2, type = \"exon\")  # Example 3: Specifying a gene_type and baseline if applicable # comparison<-compare_release(gtf_v1,gtf_v2,\"gene\",gene_type=\"protein_coding\",baseline = \"average\")"},{"path":"https://monahton.github.io/GencoDymo2/reference/df_to_fasta.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Data Frame to FASTA File — df_to_fasta","title":"Convert Data Frame to FASTA File — df_to_fasta","text":"Converts data frame containing sequence IDs sequences FASTA-formatted file, optionally compressed gzip.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/df_to_fasta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Data Frame to FASTA File — df_to_fasta","text":"","code":"df_to_fasta(df, id_col, seq_col, output_file, gzip = TRUE, verbose = TRUE)"},{"path":"https://monahton.github.io/GencoDymo2/reference/df_to_fasta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Data Frame to FASTA File — df_to_fasta","text":"df data frame least two columns: one sequence IDs one sequences. id_col character string specifying column name containing sequence IDs. seq_col character string specifying column name containing sequence data. output_file character string specifying output file path. gzip logical indicating whether compress output gzip file. Defaults TRUE. verbose logical indicating whether print progress messages. Defaults TRUE.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/df_to_fasta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Data Frame to FASTA File — df_to_fasta","text":"return value. Writes FASTA file specified path.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/df_to_fasta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Data Frame to FASTA File — df_to_fasta","text":"function efficiently writes large sequence datasets FASTA format, handling compression progress reporting. validates input columns manages memory processing data chunks.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/df_to_fasta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Data Frame to FASTA File — df_to_fasta","text":"","code":"temp_dir <- tempdir() temp_output <- file.path(temp_dir, \"output.fa.gz\") seq_data <- data.frame(   transcript_id = c(\"ENST0001\", \"ENST0002\"),   sequence = c(\"ATGCTAGCTAG\", \"GCTAGCTAGCT\") ) df_to_fasta(seq_data, \"transcript_id\", \"sequence\", temp_output) #> Writing FASTA file... #> FASTA file successfully saved to /tmp/RtmpocEHzN/output.fa.gz"},{"path":"https://monahton.github.io/GencoDymo2/reference/eliminate_redundant_elements.html","id":null,"dir":"Reference","previous_headings":"","what":"Eliminate Redundant Genomic Elements — eliminate_redundant_elements","title":"Eliminate Redundant Genomic Elements — eliminate_redundant_elements","text":"Removes redundant genomic elements (exons introns) data frame, ensuring element uniquely represented. Redundancy determined genomic coordinates gene ID.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/eliminate_redundant_elements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Eliminate Redundant Genomic Elements — eliminate_redundant_elements","text":"","code":"eliminate_redundant_elements(input, element_type = \"exon\")"},{"path":"https://monahton.github.io/GencoDymo2/reference/eliminate_redundant_elements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Eliminate Redundant Genomic Elements — eliminate_redundant_elements","text":"input data frame containing genomic element coordinates (exons introns) columns seqnames, start, end, gene_id. element_type type genomic element process. Valid options \"exon\" (default) \"intron\".","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/eliminate_redundant_elements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Eliminate Redundant Genomic Elements — eliminate_redundant_elements","text":"data frame redundant elements removed, retaining unique entries based coordinates gene ID.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/eliminate_redundant_elements.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Eliminate Redundant Genomic Elements — eliminate_redundant_elements","text":"function uses genomic coordinates (chromosome, start, end) gene ID identify remove duplicate entries. exons, coordinates directly compared. introns, coordinates derived intron_start intron_end columns (check extract_introns function details)","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/eliminate_redundant_elements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Eliminate Redundant Genomic Elements — eliminate_redundant_elements","text":"","code":"file_v1 <- system.file(\"extdata\", \"gencode.v1.example.gtf.gz\", package = \"GencoDymo2\") gtf_v1 <- load_file(file_v1) # Eliminate redundant exons nonredundant_exons <- eliminate_redundant_elements(gtf_v1, element_type = \"exon\") # Eliminate redundant introns # nonredundant_introns <- eliminate_redundant_elements(gtf_v1, element_type = \"intron\")"},{"path":"https://monahton.github.io/GencoDymo2/reference/extract_cds_sequences.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Coding Sequences (CDS) from GTF Annotations — extract_cds_sequences","title":"Extract Coding Sequences (CDS) from GTF Annotations — extract_cds_sequences","text":"Extracts CDS regions GTF annotation file data frame using genomic coordinates retrieves corresponding DNA sequences BSgenome reference.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/extract_cds_sequences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Coding Sequences (CDS) from GTF Annotations — extract_cds_sequences","text":"","code":"extract_cds_sequences(input, genome, save_fasta, output_file, verbose)"},{"path":"https://monahton.github.io/GencoDymo2/reference/extract_cds_sequences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Coding Sequences (CDS) from GTF Annotations — extract_cds_sequences","text":"input character string (GTF file path) data frame containing CDS annotations. genome BSgenome object relevant genome. Defaults human (hg38). save_fasta logical indicating whether save sequences FASTA file. Defaults FALSE. output_file character string specifying FASTA output path. NULL, uses \"CDS.fa\". verbose logical indicating whether print progress messages. Defaults TRUE.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/extract_cds_sequences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Coding Sequences (CDS) from GTF Annotations — extract_cds_sequences","text":"data frame containing CDS annotations corresponding sequences. save_fasta = TRUE, also writes FASTA file.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/extract_cds_sequences.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Coding Sequences (CDS) from GTF Annotations — extract_cds_sequences","text":"function processes CDS entries input GTF, extracts sequences reference genome, optionally saves FASTA format. Useful downstream analyses like protein translation.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/extract_cds_sequences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Coding Sequences (CDS) from GTF Annotations — extract_cds_sequences","text":"","code":"file_v1 <- system.file(\"extdata\", \"gencode.v1.example.gtf.gz\", package = \"GencoDymo2\") gtf_v1 <- load_file(file_v1) # Human CDS extraction suppressPackageStartupMessages(library(BSgenome.Hsapiens.UCSC.hg38)) suppressPackageStartupMessages(library(GenomicRanges)) gtf_granges <- GRanges(gtf_v1) cds_seqs <- extract_cds_sequences(gtf_granges, BSgenome.Hsapiens.UCSC.hg38, save_fasta = FALSE) #> Using provided GRanges object... #> Warning: No CDS features found in the GTF data.  # Mouse CDS extraction # cds_mouse <- extract_cds_sequences(\"gencode.vM27.gtf\", BSgenome.Mmusculus.UCSC.mm39)"},{"path":"https://monahton.github.io/GencoDymo2/reference/extract_element_by_strand.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Genomic Elements by Strand — extract_element_by_strand","title":"Extract Genomic Elements by Strand — extract_element_by_strand","text":"Filters data frame GTF/GFF3 file extract specific genomic elements (genes, transcripts, exons, introns) located specified DNA strand (+ -).","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/extract_element_by_strand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Genomic Elements by Strand — extract_element_by_strand","text":"","code":"extract_element_by_strand(input, type, strand, verbose = TRUE)"},{"path":"https://monahton.github.io/GencoDymo2/reference/extract_element_by_strand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Genomic Elements by Strand — extract_element_by_strand","text":"input data frame derived GTF/GFF3 file containing genomic annotations. type character string specifying type element extract. Valid options: \"gene\", \"transcript\", \"exon\", \"intron\". strand character string indicating DNA strand filter. Valid options: \"+\" (forward) \"-\" (reverse). verbose logical indicating whether print count extracted elements. Defaults TRUE.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/extract_element_by_strand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Genomic Elements by Strand — extract_element_by_strand","text":"data frame containing elements specified type located chosen strand.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/extract_element_by_strand.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Genomic Elements by Strand — extract_element_by_strand","text":"function filters input data based type strand columns. useful strand-specific analyses, studying antisense transcripts strand-biased genomic features.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/extract_element_by_strand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Genomic Elements by Strand — extract_element_by_strand","text":"","code":"# Example 1: Extract genes on the forward strand using gencode.v1 file_v1 <- system.file(\"extdata\", \"gencode.v1.example.gtf.gz\", package = \"GencoDymo2\") gtf_v1 <- load_file(file_v1) forward_genes_v1 <- extract_element_by_strand(gtf_v1, type = \"gene\", strand = \"+\") #> Genes on strand '+': 3  # Example 2: Extract exons on the reverse strand using gencode.v1 reverse_exons_v1 <- extract_element_by_strand(gtf_v1, type = \"exon\", strand = \"-\") #> Exons on strand '-': 8"},{"path":"https://monahton.github.io/GencoDymo2/reference/extract_introns.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Intron Coordinates from GENCODE Annotations — extract_introns","title":"Extract Intron Coordinates from GENCODE Annotations — extract_introns","text":"Processes GTF file data frame extract intron coordinates, including genomic positions, transcript associations, metadata. function handles positive negative strands, ensuring correct orientation intron boundaries. designed work GENCODE-formatted annotations.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/extract_introns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Intron Coordinates from GENCODE Annotations — extract_introns","text":"","code":"extract_introns(input, verbose = TRUE)"},{"path":"https://monahton.github.io/GencoDymo2/reference/extract_introns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Intron Coordinates from GENCODE Annotations — extract_introns","text":"input character string specifying file path GTF/GFF3 file, data frame containing GTF data. input must include columns: seqnames, start, end, strand, type, transcript_id. verbose Logical. TRUE (default), progress messages printed execution.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/extract_introns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Intron Coordinates from GENCODE Annotations — extract_introns","text":"data frame following columns: seqnames: Chromosome scaffold name. intron_start, intron_end: Genomic start/end positions intron. width: Length intron (intron_end - intron_start + 1). gene_id, transcript_id, intron_number: Gene/transcript identifiers intron position within transcript. Additional metadata columns original GTF (e.g., gene_name).","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/extract_introns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Intron Coordinates from GENCODE Annotations — extract_introns","text":"Input Handling: Loads GTF file path provided; uses data frame directly supplied. Exon Filtering: Extracts exon records classifies (e.g., first/last exon) needed. Multi-Exon Transcripts: Removes single-exon transcripts focus spliced transcripts. Intron Calculation: Determines intron coordinates identifying gaps consecutive exons, adjusting strand orientation. Output: Returns data frame intron coordinates metadata, sorted gene position.","code":""},{"path":[]},{"path":"https://monahton.github.io/GencoDymo2/reference/extract_introns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Intron Coordinates from GENCODE Annotations — extract_introns","text":"","code":"file_v1 <- system.file(\"extdata\", \"gencode.v1.example.gtf.gz\", package = \"GencoDymo2\")  # From a pre-loaded data frame gtf_v1 <- load_file(file_v1) introns <- extract_introns(gtf_v1) #> Preparing input... #> Removing single-exon transcripts... #> Single-exon transcripts: 1 #> Extracting intron coordinates... #> Collecting intron data... #> Total introns: 3"},{"path":"https://monahton.github.io/GencoDymo2/reference/extract_single_exon.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Single-Exon Genes/Transcripts in GENCODE Data — extract_single_exon","title":"Identify Single-Exon Genes/Transcripts in GENCODE Data — extract_single_exon","text":"function identifies single-exon genes transcripts genomic annotation dataset, typically obtained GENCODE database. processes input data, either file already loaded data frame, returns either single-exon genes single-exon transcripts based user's selection. function works seamlessly GTF/GFF files data frames include standard GENCODE annotation fields. especially useful identifying genes transcripts undergo splicing.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/extract_single_exon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Single-Exon Genes/Transcripts in GENCODE Data — extract_single_exon","text":"","code":"extract_single_exon(input, level = \"gene\", output_file = NULL)"},{"path":"https://monahton.github.io/GencoDymo2/reference/extract_single_exon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Single-Exon Genes/Transcripts in GENCODE Data — extract_single_exon","text":"input Either file path GTF/GFF3 file data frame representing genomic annotations. input data contain least columns type, gene_id, transcript_id, exon_number. file path provided, assumed GTF/GFF file. level character string specifying level analysis. either \"gene\" \"transcript\". default \"gene\". selection allows users specify whether want identify single-exon genes single-exon transcripts annotation. output_file Optional. file path save results tab-separated file. provided, results saved. file include IDs single-exon genes transcripts along respective exon IDs. feature useful exporting results analysis reporting purposes.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/extract_single_exon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Single-Exon Genes/Transcripts in GENCODE Data — extract_single_exon","text":"data frame containing IDs single-exon genes transcripts based selected level. returned data frame contains following columns: gene_id transcript_id: IDs single-exon genes transcripts. exon_count: count exons entity (always 1 single-exon entities). exon_id: ID exon associated single-exon gene transcript. data frame can used downstream analysis, identifying unique single-exon genes  transcripts, exporting file.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/extract_single_exon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify Single-Exon Genes/Transcripts in GENCODE Data — extract_single_exon","text":"Input Validation: Checks required columns valid level specification. Exon Counting: Groups exons gene/transcript counts occurrences. Single-Exon Filtering: Retains entities exactly one exon. Output: Returns filtered results; optionally writes file.","code":""},{"path":[]},{"path":"https://monahton.github.io/GencoDymo2/reference/extract_single_exon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Single-Exon Genes/Transcripts in GENCODE Data — extract_single_exon","text":"","code":"# Example input data frame input <- data.frame(   type = c(\"exon\", \"exon\", \"exon\", \"exon\", \"exon\"),   gene_id = c(\"gene1\", \"gene1\", \"gene2\", \"gene3\", \"gene4\"),   transcript_id = c(\"tx1\", \"tx1\", \"tx2\", \"tx3\", \"tx4\"),   exon_number = c(1, 2, 1, 1, 1),   exon_id = c(\"e1\", \"e2\", \"e1\", \"e1\", \"e1\") )  # Identify single-exon genes single_exon_genes <- extract_single_exon(input, level = \"gene\") print(single_exon_genes) #>   gene_id exon_count exon_id #> 1   gene2          1      e1 #> 2   gene3          1      e1 #> 3   gene4          1      e1  # Identify single-exon transcripts single_exon_transcripts <- extract_single_exon(input, level = \"transcript\") print(single_exon_transcripts) #>   transcript_id exon_count exon_id #> 1           tx2          1      e1 #> 2           tx3          1      e1 #> 3           tx4          1      e1"},{"path":"https://monahton.github.io/GencoDymo2/reference/extract_ss_motif.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Splice Site Motifs for MaxEntScan Analysis (5' or 3') — extract_ss_motif","title":"Extract Splice Site Motifs for MaxEntScan Analysis (5' or 3') — extract_ss_motif","text":"function extracts splice site motifs (5' splice site (5ss) 3' splice site (3ss)) genomic dataset. retrieves donor acceptor splice site motifs intron, based strand orientation, compiles FASTA file, can used analysis (e.g., MaxEntScan).","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/extract_ss_motif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Splice Site Motifs for MaxEntScan Analysis (5' or 3') — extract_ss_motif","text":"","code":"extract_ss_motif(input, genome, type, verbose, save_fasta, output_file)"},{"path":"https://monahton.github.io/GencoDymo2/reference/extract_ss_motif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Splice Site Motifs for MaxEntScan Analysis (5' or 3') — extract_ss_motif","text":"input data frame containing genomic information following required columns: seqnames: Chromosome scaffold names. strand: Strand orientation, either '+' '-'. intron_start: Start position intron. intron_end: End position intron. transcript_id: Identifier transcript. intron_number: Identifier intron within transcript. genome genome object BSgenome package (default BSgenome.Hsapiens.UCSC.hg38). type string indicating splice site motif extract. One \"5ss\" (donor splice site) \"3ss\" (acceptor splice site). verbose Logical; TRUE, progress messages printed. Default TRUE. save_fasta Logical; TRUE, FASTA file saved containing extracted motifs. Default FALSE. output_file string specifying output file path name FASTA file. NULL, default name used (either \"5ss_motif_fasta.fa\" \"3ss_motif_fasta.fa\").","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/extract_ss_motif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Splice Site Motifs for MaxEntScan Analysis (5' or 3') — extract_ss_motif","text":"data frame : donor_ss_motif acceptor_ss_motif: 9bp (5' ss) 23bp (3' ss) sequence. Genomic coordinates transcript metadata.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/extract_ss_motif.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Splice Site Motifs for MaxEntScan Analysis (5' or 3') — extract_ss_motif","text":"function performs following steps: Based type argument, function prepares coordinates extracting either donor (5ss) acceptor (3ss) splice site motifs, adjusting motif start end positions depending strand orientation. motif sequences extracted specified genome using getSeq function BSgenome package. save_fasta TRUE, FASTA file generated containing extracted motifs, transcript IDs intron numbers used FASTA headers.","code":""},{"path":[]},{"path":"https://monahton.github.io/GencoDymo2/reference/extract_ss_motif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Splice Site Motifs for MaxEntScan Analysis (5' or 3') — extract_ss_motif","text":"","code":"file_v1 <- system.file(\"extdata\", \"gencode.v1.example.gtf.gz\", package = \"GencoDymo2\") gtf_v1 <- load_file(file_v1) introns <- extract_introns(gtf_v1) #> Preparing input... #> Removing single-exon transcripts... #> Single-exon transcripts: 1 #> Extracting intron coordinates... #> Collecting intron data... #> Total introns: 3 suppressPackageStartupMessages(library(BSgenome.Hsapiens.UCSC.hg38)) # Extract donor splice site motifs motifs_df <- extract_ss_motif(introns, BSgenome.Hsapiens.UCSC.hg38, \"5ss\", verbose = FALSE)  # Extract acceptor splice site motifs without saving the FASTA file motifs_df <- extract_ss_motif(introns, BSgenome.Hsapiens.UCSC.hg38, type = \"3ss\", verbose = FALSE)"},{"path":"https://monahton.github.io/GencoDymo2/reference/find_cryptic_splice_sites.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Potential Cryptic Splice Sites. — find_cryptic_splice_sites","title":"Identify Potential Cryptic Splice Sites. — find_cryptic_splice_sites","text":"function identifies potential cryptic splice sites comparing sequence motifs introns canonical splice site motifs (donor acceptor). Cryptic splice sites match canonical donor (GT) acceptor motifs (AG). compares identified splice sites provided canonical motifs flags sites differ canonical patterns, making useful studying aberrant splicing events.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/find_cryptic_splice_sites.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Potential Cryptic Splice Sites. — find_cryptic_splice_sites","text":"","code":"find_cryptic_splice_sites(input, genome, canonical_donor, canonical_acceptor, verbose)"},{"path":"https://monahton.github.io/GencoDymo2/reference/find_cryptic_splice_sites.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Potential Cryptic Splice Sites. — find_cryptic_splice_sites","text":"input data frame containing intron coordinates, ideally generated extract_introns() assign_splice_sites(). Must contain columns: seqnames, intron_start, intron_end, strand, transcript_id, intron_number, gene_name, gene_id, donor_ss acceptor_ss. genome BSgenome object representing genome sequence. used extract sequence intron identify splice sites. canonical_donor character vector canonical donor splice site motifs. Default c(\"GT\"). canonical_acceptor character vector canonical acceptor splice site motifs. Default c(\"AG\"). verbose Logical; TRUE, progress messages printed. Default TRUE.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/find_cryptic_splice_sites.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Potential Cryptic Splice Sites. — find_cryptic_splice_sites","text":"input data frame two logical columns: cryptic_donor: TRUE donor site non-canonical. cryptic_acceptor: TRUE acceptor site non-canonical.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/find_cryptic_splice_sites.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify Potential Cryptic Splice Sites. — find_cryptic_splice_sites","text":"function performs following steps: assigns donor acceptor splice sites intron using assign_splice_sites function. compares identified donor acceptor splice sites provided canonical motifs (GT donor AG acceptor default). splice site sequences match canonical motifs, flagged cryptic. function returns data frame intron information, including additional columns cryptic_donor cryptic_acceptor indicating whether splice sites cryptic. progress function printed verbose argument set TRUE, showing also total number cryptic donor acceptor sites respective percentages.","code":""},{"path":[]},{"path":"https://monahton.github.io/GencoDymo2/reference/find_cryptic_splice_sites.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Potential Cryptic Splice Sites. — find_cryptic_splice_sites","text":"","code":"suppressPackageStartupMessages(library(BSgenome.Hsapiens.UCSC.hg38)) file_v1 <- system.file(\"extdata\", \"gencode.v1.example.gtf.gz\", package = \"GencoDymo2\") gtf_v1 <- load_file(file_v1) introns_df <- extract_introns(gtf_v1) #> Preparing input... #> Removing single-exon transcripts... #> Single-exon transcripts: 1 #> Extracting intron coordinates... #> Collecting intron data... #> Total introns: 3 introns_ss <- assign_splice_sites(introns_df, genome = BSgenome.Hsapiens.UCSC.hg38) #> Preparing donor splice sites data... #> Preparing acceptor splice sites data... #> Merging donor and acceptor splice site data... cryptic_sites <- find_cryptic_splice_sites(introns_ss, BSgenome.Hsapiens.UCSC.hg38) #> Identifying cryptic splice sites... #> Detected 3 cryptic donors (100.00% of total). #> Detected 3 cryptic acceptors (100.00% of total). head(cryptic_sites) #>   seqnames intron_start intron_end strand transcript_id intron_number gene_name #> 1     chr1         7001       5999      -     GeneB-001       intron1      <NA> #> 2     chr1         7501       5999      -     GeneB-002       intron1      <NA> #> 3     chr1         7501       6599      -     GeneB-001       intron2      <NA> #>   gene_id donor_ss acceptor_ss cryptic_donor cryptic_acceptor #> 1   GeneB       NN          NN          TRUE             TRUE #> 2   GeneB       NN          NN          TRUE             TRUE #> 3   GeneB       NN          NN          TRUE             TRUE"},{"path":"https://monahton.github.io/GencoDymo2/reference/get_gff3.html","id":null,"dir":"Reference","previous_headings":"","what":"Download GFF3 File from the GENCODE Database — get_gff3","title":"Download GFF3 File from the GENCODE Database — get_gff3","text":"Downloads GFF3 file specified species, release version, annotation type GENCODE database. file saved user-specified directory current working directory default.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/get_gff3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download GFF3 File from the GENCODE Database — get_gff3","text":"","code":"get_gff3(species, release_version, annotation_type, dest_folder)"},{"path":"https://monahton.github.io/GencoDymo2/reference/get_gff3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download GFF3 File from the GENCODE Database — get_gff3","text":"species character string indicating species. Supported values : \"human\" \"mouse\" release_version character string specifying release version. Options include: \"latest_release\": Fetches latest release species. \"release_X\": Specific release version human (e.g., \"release_42\"). \"release_MX\": Specific release version mouse (e.g., \"release_M36\"). annotation_type character string specifying annotation type. Supported values include: \"annotation.gff3.gz\" \"basic.annotation.gff3.gz\" \"chr_patch_hapl_scaff.annotation.gff3.gz\" \"chr_patch_hapl_scaff.basic.annotation.gff3.gz\" \"long_noncoding_RNAs.gff3.gz\" \"primary_assembly.annotation.gff3.gz\" \"primary_assembly.basic.annotation.gff3.gz\" \"tRNAs.gff3.gz\" \"polyAs.gff3.gz\" dest_folder character string specifying destination folder. Defaults current working directory.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/get_gff3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download GFF3 File from the GENCODE Database — get_gff3","text":"character string specifying full path downloaded GFF3 file.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/get_gff3.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download GFF3 File from the GENCODE Database — get_gff3","text":"function dynamically determines correct file URL based provided parameters downloads GFF3 file desired location. \"latest_release\" specified release_version, function first determine latest available release using get_latest_release().","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/get_gff3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download GFF3 File from the GENCODE Database — get_gff3","text":"","code":"# Download the latest human GTF file with primary assembly annotations into a temp directory temp_dir <- tempdir() gff3_file <- get_gff3(   species = \"human\",   release_version = \"latest_release\",   annotation_type = \"primary_assembly.basic.annotation.gff3.gz\",   dest_folder = temp_dir ) #> Latest human GENCODE release: release_47 #> Downloading GFF3 file from https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_47/gencode.v47.primary_assembly.basic.annotation.gff3.gz #> GFF3 file downloaded successfully: /tmp/RtmpocEHzN/gencode.v47.primary_assembly.basic.annotation.gff3.gz print(gff3_file) #> [1] \"/tmp/RtmpocEHzN/gencode.v47.primary_assembly.basic.annotation.gff3.gz\"  # Download a specific mouse release with long noncoding RNA annotations into a temp directory temp_dir <- tempdir() gff3_file <- get_gff3(   species = \"mouse\",   release_version = \"release_M36\",   annotation_type = \"long_noncoding_RNAs.gff3.gz\",   dest_folder = temp_dir ) #> Downloading GFF3 file from https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M36/gencode.vM36.long_noncoding_RNAs.gff3.gz #> GFF3 file downloaded successfully: /tmp/RtmpocEHzN/gencode.vM36.long_noncoding_RNAs.gff3.gz print(gff3_file) #> [1] \"/tmp/RtmpocEHzN/gencode.vM36.long_noncoding_RNAs.gff3.gz\""},{"path":"https://monahton.github.io/GencoDymo2/reference/get_gtf.html","id":null,"dir":"Reference","previous_headings":"","what":"Download GTF File from the GENCODE Database — get_gtf","title":"Download GTF File from the GENCODE Database — get_gtf","text":"Downloads GTF file specified species, release version, annotation type GENCODE database. file saved user-specified directory current working directory default.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/get_gtf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download GTF File from the GENCODE Database — get_gtf","text":"","code":"get_gtf(species, release_version, annotation_type, dest_folder)"},{"path":"https://monahton.github.io/GencoDymo2/reference/get_gtf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download GTF File from the GENCODE Database — get_gtf","text":"species character string indicating species. Supported values : \"human\" \"mouse\" release_version character string specifying release version. Options include: \"latest_release\": Automatically fetches latest release specified species. \"release_X\": Specific human release (e.g., \"release_47\"). \"release_MX\": Specific mouse release (e.g., \"release_M36\"). annotation_type character string specifying annotation type. Valid options : \"annotation.gtf.gz\" \"basic.annotation.gtf.gz\" \"chr_patch_hapl_scaff.annotation.gtf.gz\" \"chr_patch_hapl_scaff.basic.annotation.gtf.gz\" \"long_noncoding_RNAs.gtf.gz\" \"primary_assembly.annotation.gtf.gz\" \"primary_assembly.basic.annotation.gtf.gz\" \"tRNAs.gtf.gz\" \"polyAs.gtf.gz\" dest_folder character string specifying destination folder file downloaded. Defaults current working directory.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/get_gtf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download GTF File from the GENCODE Database — get_gtf","text":"character string specifying path downloaded GTF file.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/get_gtf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download GTF File from the GENCODE Database — get_gtf","text":"function dynamically determines correct file URL based provided parameters downloads GTF file desired location. \"latest_release\" specified release_version, function first determine latest available release using get_latest_release().","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/get_gtf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download GTF File from the GENCODE Database — get_gtf","text":"","code":"# Download the latest human GTF file with primary assembly annotations into a temp directory temp_dir <- tempdir() gtf_file <- get_gtf(   species = \"human\",   release_version = \"latest_release\",   annotation_type = \"primary_assembly.basic.annotation.gtf.gz\",   dest_folder = temp_dir ) #> Latest human GENCODE release: release_47 #> Downloading GTF file from https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_47/gencode.v47.primary_assembly.basic.annotation.gtf.gz #> GTF file downloaded successfully: /tmp/RtmpocEHzN/gencode.v47.primary_assembly.basic.annotation.gtf.gz print(gtf_file) #> [1] \"/tmp/RtmpocEHzN/gencode.v47.primary_assembly.basic.annotation.gtf.gz\"  # Download a specific mouse release with long noncoding RNA annotations into a temp directory temp_dir <- tempdir() gtf_file <- get_gtf(   species = \"mouse\",   release_version = \"release_M36\",   annotation_type = \"long_noncoding_RNAs.gtf.gz\",   dest_folder = temp_dir ) #> Downloading GTF file from https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M36/gencode.vM36.long_noncoding_RNAs.gtf.gz #> GTF file downloaded successfully: /tmp/RtmpocEHzN/gencode.vM36.long_noncoding_RNAs.gtf.gz print(gtf_file) #> [1] \"/tmp/RtmpocEHzN/gencode.vM36.long_noncoding_RNAs.gtf.gz\""},{"path":"https://monahton.github.io/GencoDymo2/reference/get_latest_release.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Latest Gencode Release Dynamically — get_latest_release","title":"Get the Latest Gencode Release Dynamically — get_latest_release","text":"function retrieves latest available release Gencode database given species (human mouse) querying relevant FTP directory. automates process identifying latest release annotations human mouse.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/get_latest_release.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Latest Gencode Release Dynamically — get_latest_release","text":"","code":"get_latest_release(species, verbose = TRUE)"},{"path":"https://monahton.github.io/GencoDymo2/reference/get_latest_release.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Latest Gencode Release Dynamically — get_latest_release","text":"species character string indicating species. Supported values : \"human\" \"mouse\" verbose Logical. TRUE (default), function prints latest release.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/get_latest_release.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Latest Gencode Release Dynamically — get_latest_release","text":"character string representing latest release version specified species (e.g., \"release_42\" human \"release_36\" mouse).","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/get_latest_release.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the Latest Gencode Release Dynamically — get_latest_release","text":"function accesses GENCODE FTP directory parses available folders determine latest release. particularly useful bioinformatics workflows require --date annotation files without manual checks.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/get_latest_release.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Latest Gencode Release Dynamically — get_latest_release","text":"","code":"# Retrieve the latest release version for human human_release <- get_latest_release(species = \"human\", verbose = FALSE) cat(\"Latest human GENCODE release: release_47\") #> Latest human GENCODE release: release_47  # Get the latest release for mouse mouse_release <- get_latest_release(\"mouse\", verbose = TRUE) #> Latest mouse GENCODE release: release_M36"},{"path":"https://monahton.github.io/GencoDymo2/reference/load_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a GTF or GFF3 file from GENCODE as a data frame. — load_file","title":"Load a GTF or GFF3 file from GENCODE as a data frame. — load_file","text":"function imports GTF GFF3 file (commonly GENCODE website) converts data frame. function provides flexibility users work genomic feature files easily R environment.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/load_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a GTF or GFF3 file from GENCODE as a data frame. — load_file","text":"","code":"load_file(filename)"},{"path":"https://monahton.github.io/GencoDymo2/reference/load_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a GTF or GFF3 file from GENCODE as a data frame. — load_file","text":"filename character string representing path GTF GFF3 file (e.g., \"gencode.vM36.annotation.gtf.gz\"). file GTF GFF3 format must downloaded reliable source like GENCODE.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/load_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a GTF or GFF3 file from GENCODE as a data frame. — load_file","text":"data frame containing parsed content GTF GFF3 file. data frame includes standard columns 'seqnames', 'start', 'end', 'strand', 'feature', 'gene_id', among others.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/load_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load a GTF or GFF3 file from GENCODE as a data frame. — load_file","text":"function uses rtracklayer package import GTF GFF3 file returns data frame. user ensure input file properly formatted accessible specified path. Files larger hundred MBs may take longer load process.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/load_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load a GTF or GFF3 file from GENCODE as a data frame. — load_file","text":"","code":"# Load example GTF files from the package file_v1 <- system.file(\"extdata\", \"gencode.v1.example.gtf.gz\", package = \"GencoDymo2\") gtf_v1 <- load_file(file_v1) head(gtf_v1) #>   seqnames start   end width strand source       type score phase gene_id #> 1     chr1  1000  5000  4001      + HAVANA       gene    NA    NA   GeneA #> 2     chr1  1000  5000  4001      + HAVANA transcript    NA    NA   GeneA #> 3     chr1  1000  5000  4001      + HAVANA       exon    NA    NA   GeneA #> 4     chr1  6000 12000  6001      - HAVANA       gene    NA    NA   GeneB #> 5     chr1  6000 12000  6001      - HAVANA transcript    NA    NA   GeneB #> 6     chr1  6000  6500   501      - HAVANA       exon    NA    NA   GeneB #>       gene_name transcript_id exon_number #> 1 UnsplicedGene          <NA>        <NA> #> 2          <NA>     GeneA-001        <NA> #> 3          <NA>     GeneA-001           1 #> 4   SplicedGene          <NA>        <NA> #> 5          <NA>     GeneB-001        <NA> #> 6          <NA>     GeneB-001           1"},{"path":"https://monahton.github.io/GencoDymo2/reference/spliced_trans_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Spliced Transcript Lengths — spliced_trans_length","title":"Calculate Spliced Transcript Lengths — spliced_trans_length","text":"Computes spliced length transcripts summing lengths constituent exons. represents mature RNA length intron removal.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/spliced_trans_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Spliced Transcript Lengths — spliced_trans_length","text":"","code":"spliced_trans_length(input)"},{"path":"https://monahton.github.io/GencoDymo2/reference/spliced_trans_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Spliced Transcript Lengths — spliced_trans_length","text":"input data frame containing GENCODE annotations GTF format, including type, transcript_id, width columns.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/spliced_trans_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Spliced Transcript Lengths — spliced_trans_length","text":"data frame two columns: transcript_id transcript_length, latter sum exon widths transcript.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/spliced_trans_length.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Spliced Transcript Lengths — spliced_trans_length","text":"function processes input data : Filter entries include exons. Group exons transcript ID. Sum widths exons per transcript. result provides total length mature spliced RNA transcript.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/spliced_trans_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Spliced Transcript Lengths — spliced_trans_length","text":"","code":"file_v1 <- system.file(\"extdata\", \"gencode.v1.example.gtf.gz\", package = \"GencoDymo2\") gtf_v1 <- load_file(file_v1) spliced_lengths <- spliced_trans_length(gtf_v1)"},{"path":"https://monahton.github.io/GencoDymo2/reference/stat_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Summary Statistics for Genomic Elements — stat_summary","title":"Generate Summary Statistics for Genomic Elements — stat_summary","text":"Calculates descriptive summary statistics (mean, median, standard deviation, etc.) lengths exons introns, grouped classification (e.g., first exon, inner intron).","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/stat_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Summary Statistics for Genomic Elements — stat_summary","text":"","code":"stat_summary(input, type, verbose = TRUE)"},{"path":"https://monahton.github.io/GencoDymo2/reference/stat_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Summary Statistics for Genomic Elements — stat_summary","text":"input data frame containing classified exons introns. exons, must include EXON_CLASSIFICATION. introns, requires classification columns. type character string specifying element type. Valid options: \"exon\" \"intron\". verbose logical indicating whether print progress messages. Defaults TRUE.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/stat_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Summary Statistics for Genomic Elements — stat_summary","text":"data frame summary statistics element group, including mean, median, standard deviation, standard error, quartiles, sample size.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/stat_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Summary Statistics for Genomic Elements — stat_summary","text":"exons, statistics grouped EXON_CLASSIFICATION. introns, groups include first_intron, inner_intron, splice site types (e.g., gc_intron).","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/stat_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Summary Statistics for Genomic Elements — stat_summary","text":"","code":"file_v1 <- system.file(\"extdata\", \"gencode.v1.example.gtf.gz\", package = \"GencoDymo2\") gtf_v1 <- load_file(file_v1) # Exon statistics exon_stats <- stat_summary(gtf_v1, type = \"exon\") #> Classifying exons... #> Exon classification completed. #> Calculating summary statistics... #> Summary statistics calculation completed.  # Intron statistics # intron_stats <- stat_summary(gtf_v1, type = \"intron\")"},{"path":"https://monahton.github.io/GencoDymo2/reference/tiny_example_gtf_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Tiny example GTF files — tiny_example_gtf_files","title":"Tiny example GTF files — tiny_example_gtf_files","text":"minimal GTF files used examples testing within package. gencode.v1.example.gtf.gz contains two genes: GeneA: single-exon, unspliced gene. GeneB: spliced gene two transcripts multiple exons. gencode.v2.example.gtf.gz contains two genes gencode.v1.example.gtf.gz plus: GeneC: new spliced gene multiple transcripts many exons. files stored inst/extdata/ directory can accessed using system.file(\"extdata\", \"gencode.v1.example.gtf.gz\", package = \"GencoDymo2\") system.file(\"extdata\", \"gencode.v2.example.gtf.gz\", package = \"GencoDymo2\").","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/tiny_example_gtf_files.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Tiny example GTF files — tiny_example_gtf_files","text":"Two external GTF files.","code":""},{"path":"https://monahton.github.io/GencoDymo2/reference/tiny_example_gtf_files.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Tiny example GTF files — tiny_example_gtf_files","text":"Generated manually testing purposes.","code":""},{"path":[]},{"path":"https://monahton.github.io/GencoDymo2/reference/tiny_example_gtf_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tiny example GTF files — tiny_example_gtf_files","text":"","code":"tiny_v1_path <- system.file(\"extdata\", \"gencode.v1.example.gtf.gz\", package = \"GencoDymo2\") tiny_v2_path <- system.file(\"extdata\", \"gencode.v2.example.gtf.gz\", package = \"GencoDymo2\")  gtf1 <- load_file(tiny_v1_path) head(gtf1) #>   seqnames start   end width strand source       type score phase gene_id #> 1     chr1  1000  5000  4001      + HAVANA       gene    NA    NA   GeneA #> 2     chr1  1000  5000  4001      + HAVANA transcript    NA    NA   GeneA #> 3     chr1  1000  5000  4001      + HAVANA       exon    NA    NA   GeneA #> 4     chr1  6000 12000  6001      - HAVANA       gene    NA    NA   GeneB #> 5     chr1  6000 12000  6001      - HAVANA transcript    NA    NA   GeneB #> 6     chr1  6000  6500   501      - HAVANA       exon    NA    NA   GeneB #>       gene_name transcript_id exon_number #> 1 UnsplicedGene          <NA>        <NA> #> 2          <NA>     GeneA-001        <NA> #> 3          <NA>     GeneA-001           1 #> 4   SplicedGene          <NA>        <NA> #> 5          <NA>     GeneB-001        <NA> #> 6          <NA>     GeneB-001           1  gtf2 <- load_file(tiny_v2_path) head(gtf2) #>   seqnames start   end width strand source       type score phase gene_id #> 1     chr1  1000  5000  4001      + HAVANA       gene    NA    NA   GeneA #> 2     chr1  1000  5000  4001      + HAVANA transcript    NA    NA   GeneA #> 3     chr1  1000  5000  4001      + HAVANA       exon    NA    NA   GeneA #> 4     chr1  6000 12000  6001      - HAVANA       gene    NA    NA   GeneB #> 5     chr1  6000 12000  6001      - HAVANA transcript    NA    NA   GeneB #> 6     chr1  6000  6500   501      - HAVANA       exon    NA    NA   GeneB #>       gene_name transcript_id exon_number #> 1 UnsplicedGene          <NA>        <NA> #> 2          <NA>     GeneA-001        <NA> #> 3          <NA>     GeneA-001           1 #> 4   SplicedGene          <NA>        <NA> #> 5          <NA>     GeneB-001        <NA> #> 6          <NA>     GeneB-001           1"},{"path":"https://monahton.github.io/GencoDymo2/news/index.html","id":"gencodymo2-101","dir":"Changelog","previous_headings":"","what":"GencoDymo2 1.0.1","title":"GencoDymo2 1.0.1","text":"Initial stable release GencoDymo2 Provides functions extract, compare, analyze GENCODE annotations. Supports generation splice site motif FASTA files. modified remake GencoDymo package","code":""},{"path":"https://monahton.github.io/GencoDymo2/news/index.html","id":"gencodymo2-1009000","dir":"Changelog","previous_headings":"","what":"GencoDymo2 1.0.0.9000","title":"GencoDymo2 1.0.0.9000","text":"Initial development release GencoDymo2 modified remake GencoDymo package","code":""}]
